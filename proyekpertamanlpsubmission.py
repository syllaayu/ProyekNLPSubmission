# -*- coding: utf-8 -*-
"""ProyekPertamaNLPSubmission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ap2j-0yM65FBOB1fsIIXnvHp-1PoaB6h
"""

import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

df = pd.read_csv('Review.csv')

df.head()

category = pd.get_dummies(df.sentiment)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns='sentiment')
df_baru.info()

review = df_baru['review'].values
y = df_baru[['Negative','Positive']].values
review_train , review_test, y_train, y_test = train_test_split(review, y, test_size=0.2)

#mengubah tipe data kata menjadi numerik
tokenizer = Tokenizer(num_words=5600, oov_token='x')
tokenizer.fit_on_texts(review_train)
tokenizer.fit_on_texts(review_test)

sekuens_train = tokenizer.texts_to_sequences(review_train)
sekuens_test = tokenizer.texts_to_sequences(review_test)

padded_train = pad_sequences(sekuens_train)
padded_test = pad_sequences(sekuens_test)

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5600, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dropout(0.8),
    tf.keras.layers.Dense(2, activation='softmax'),
])

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

print(model.summary())

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.98):
      print("\nAkurasi telah mencapai >99%!")
      self.model.stop_training = True
callbacks = myCallback()

# memanggil fungsi dengan fit
num_epochs = 45 #jumlah epochs
history = model.fit(padded_train, y_train, epochs=num_epochs,
                    validation_data=(padded_test, y_test), verbose=2, callbacks=[callbacks])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')

plt.legend(['Train', 'Test'], loc='lower right')
plt.show()